# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import json
import sys
from typing import Any, Callable, Dict, IO, List, Optional, TypeVar, Union, overload

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .. import models as _models
from .._model_base import AzureJSONEncoder, _deserialize
from .._serialization import Serializer
from .._vendor import _format_url_section

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_installations_get_request(installation_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/installations/{installationId}"
    path_format_arguments = {
        "installationId": _SERIALIZER.url("installation_id", installation_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_installations_delete_request(installation_id: str, **kwargs: Any) -> HttpRequest:
    # Construct URL
    _url = "/installations/{installationId}"
    path_format_arguments = {
        "installationId": _SERIALIZER.url("installation_id", installation_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(method="DELETE", url=_url, **kwargs)


def build_installations_create_or_update_request(installation_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    # Construct URL
    _url = "/installations/{installationId}"
    path_format_arguments = {
        "installationId": _SERIALIZER.url("installation_id", installation_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_installations_update_request(installation_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    # Construct URL
    _url = "/installations/{installationId}"
    path_format_arguments = {
        "installationId": _SERIALIZER.url("installation_id", installation_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="PATCH", url=_url, headers=_headers, **kwargs)


def build_registrations_create_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/registrations"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_registrations_create_or_update_request(
    registration_id: str, *, e_tag: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/registrations/{registrationId}"
    path_format_arguments = {
        "registrationId": _SERIALIZER.url("registration_id", registration_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    if e_tag is not None:
        _headers["If-Match"] = _SERIALIZER.header("e_tag", e_tag, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, headers=_headers, **kwargs)


def build_registrations_delete_request(
    registration_id: str, *, e_tag: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    # Construct URL
    _url = "/registrations/{registrationId}"
    path_format_arguments = {
        "registrationId": _SERIALIZER.url("registration_id", registration_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    if e_tag is not None:
        _headers["If-Match"] = _SERIALIZER.header("e_tag", e_tag, "str")

    return HttpRequest(method="DELETE", url=_url, headers=_headers, **kwargs)


def build_registrations_get_request(registration_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/registrations/{registrationId}"
    path_format_arguments = {
        "registrationId": _SERIALIZER.url("registration_id", registration_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_registrations_list_request(
    *,
    top: Optional[str] = None,
    filter: Optional[str] = None,
    continuation_token_parameter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/registrations"

    # Construct parameters
    if top is not None:
        _params["$top"] = _SERIALIZER.query("top", top, "str")
    if filter is not None:
        _params["$fitler"] = _SERIALIZER.query("filter", filter, "str")
    if continuation_token_parameter is not None:
        _params["continuationToken"] = _SERIALIZER.query(
            "continuation_token_parameter", continuation_token_parameter, "str"
        )

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_list_registrations_by_tag_list_request(
    tag: str, *, top: Optional[str] = None, continuation_token_parameter: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/tags/{tag}/registrations"
    path_format_arguments = {
        "tag": _SERIALIZER.url("tag", tag, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    if top is not None:
        _params["$top"] = _SERIALIZER.query("top", top, "str")
    if continuation_token_parameter is not None:
        _params["continuationToken"] = _SERIALIZER.query(
            "continuation_token_parameter", continuation_token_parameter, "str"
        )

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_notifications_send_notification_request(
    *,
    test: bool,
    platform: str,
    direct: Optional[bool] = None,
    device_handle: Optional[str] = None,
    tags: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/messages"

    # Construct parameters
    if direct is not None:
        _params["direct"] = _SERIALIZER.query("direct", direct, "bool")
    _params["test"] = _SERIALIZER.query("test", test, "bool")

    # Construct headers
    _headers["ServiceBusNotification-Format"] = _SERIALIZER.header("platform", platform, "str")
    if device_handle is not None:
        _headers["ServiceBusNotification-DeviceHandle"] = _SERIALIZER.header("device_handle", device_handle, "str")
    if tags is not None:
        _headers["ServiceBusNotification-Tags"] = _SERIALIZER.header("tags", tags, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_scheduled_notifications_cancel_notification_request(notification_id: str, **kwargs: Any) -> HttpRequest:
    # Construct URL
    _url = "/schedulednotifications/{notificationId}"
    path_format_arguments = {
        "notificationId": _SERIALIZER.url("notification_id", notification_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    return HttpRequest(method="DELETE", url=_url, **kwargs)


def build_scheduled_notifications_schedule_notification_request(
    *, schedule_time: str, platform: str, tags: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    # Construct URL
    _url = "/schedulednotifications"

    # Construct headers
    _headers["ServiceBusNotification-ScheduleTime"] = _SERIALIZER.header("schedule_time", schedule_time, "str")
    _headers["ServiceBusNotification-Format"] = _SERIALIZER.header("platform", platform, "str")
    if tags is not None:
        _headers["ServiceBusNotification-Tags"] = _SERIALIZER.header("tags", tags, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_notification_hub_jobs_create_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/jobs"

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, headers=_headers, **kwargs)


def build_notification_hub_jobs_get_request(job_id: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/jobs/{jobId}"
    path_format_arguments = {
        "jobId": _SERIALIZER.url("job_id", job_id, "str"),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


def build_notification_hub_jobs_list_request(**kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})

    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/jobs"

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, headers=_headers, **kwargs)


class InstallationsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~notificationhubs.AzureNotificationHubsService`'s
        :attr:`installations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def get(self, installation_id: str, **kwargs: Any) -> _models.Installation:
        """Get an Azure Notification Hubs installation.

        :param installation_id: The installation ID. Required.
        :type installation_id: str
        :return: Installation. The Installation is compatible with MutableMapping
        :rtype: ~notificationhubs.models.Installation
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.Installation]

        request = build_installations_get_request(
            installation_id=installation_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.Installation, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def delete(self, installation_id: str, **kwargs: Any) -> None:  # pylint: disable=inconsistent-return-statements
        """Delete an Azure Notification Hubs installation.

        :param installation_id: The installation ID. Required.
        :type installation_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_installations_delete_request(
            installation_id=installation_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["tracking-id"] = self._deserialize("str", response.headers.get("tracking-id"))
        response_headers["x-ms-correlation-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-correlation-request-id")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)

    @overload
    def create_or_update(  # pylint: disable=inconsistent-return-statements
        self,
        installation_id: str,
        installation: Union[_models.Installation, JSON],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Create or update an Azure Notification Hubs installation.

        :param installation_id: The installation ID. Required.
        :type installation_id: str
        :param installation: The installation object. Required.
        :type installation: ~notificationhubs.models.Installation or JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_or_update(  # pylint: disable=inconsistent-return-statements
        self, installation_id: str, installation: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Create or update an Azure Notification Hubs installation.

        :param installation_id: The installation ID. Required.
        :type installation_id: str
        :param installation: The installation object. Required.
        :type installation: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create_or_update(  # pylint: disable=inconsistent-return-statements
        self, installation_id: str, installation: Union[_models.Installation, JSON, IO], **kwargs: Any
    ) -> None:
        """Create or update an Azure Notification Hubs installation.

        :param installation_id: The installation ID. Required.
        :type installation_id: str
        :param installation: The installation object. Is either a model type or a IO type. Required.
        :type installation: ~notificationhubs.models.Installation or JSON or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(installation, (IO, bytes)):
            _content = installation
        else:
            _content = json.dumps(installation, cls=AzureJSONEncoder)

        request = build_installations_create_or_update_request(
            installation_id=installation_id,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["tracking-id"] = self._deserialize("str", response.headers.get("tracking-id"))
        response_headers["x-ms-correlation-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-correlation-request-id")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)

    @overload
    def update(  # pylint: disable=inconsistent-return-statements
        self,
        installation_id: str,
        updates: List[_models.JsonPatch],
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Update an Azure Notification Hubs installation using JSON Patch semantics.

        :param installation_id: The installation ID. Required.
        :type installation_id: str
        :param updates: The installation patches. Required.
        :type updates: list[~notificationhubs.models.JsonPatch]
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def update(  # pylint: disable=inconsistent-return-statements
        self, installation_id: str, updates: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> None:
        """Update an Azure Notification Hubs installation using JSON Patch semantics.

        :param installation_id: The installation ID. Required.
        :type installation_id: str
        :param updates: The installation patches. Required.
        :type updates: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def update(  # pylint: disable=inconsistent-return-statements
        self, installation_id: str, updates: Union[List[_models.JsonPatch], IO], **kwargs: Any
    ) -> None:
        """Update an Azure Notification Hubs installation using JSON Patch semantics.

        :param installation_id: The installation ID. Required.
        :type installation_id: str
        :param updates: The installation patches. Is either a list type or a IO type. Required.
        :type updates: list[~notificationhubs.models.JsonPatch] or IO
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(updates, (IO, bytes)):
            _content = updates
        else:
            _content = json.dumps(updates, cls=AzureJSONEncoder)

        request = build_installations_update_request(
            installation_id=installation_id,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["tracking-id"] = self._deserialize("str", response.headers.get("tracking-id"))
        response_headers["x-ms-correlation-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-correlation-request-id")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)


class RegistrationsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~notificationhubs.AzureNotificationHubsService`'s
        :attr:`registrations` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def create(
        self,
        body: Union[_models.RegistrationDescription, JSON],
        *,
        content_type: str = "application/atom+xml;type=entry;charset=utf-8",
        **kwargs: Any
    ) -> _models.RegistrationDescription:
        """Create an Azure Notification Hubs registration description.

        :param body: The registration description. Required.
        :type body: ~notificationhubs.models.RegistrationDescription or JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/atom+xml;type=entry;charset=utf-8".
        :paramtype content_type: str
        :return: RegistrationDescription. The RegistrationDescription is compatible with MutableMapping
        :rtype: ~notificationhubs.models.RegistrationDescription
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create(
        self, body: IO, *, content_type: str = "application/atom+xml;type=entry;charset=utf-8", **kwargs: Any
    ) -> _models.RegistrationDescription:
        """Create an Azure Notification Hubs registration description.

        :param body: The registration description. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/atom+xml;type=entry;charset=utf-8".
        :paramtype content_type: str
        :return: RegistrationDescription. The RegistrationDescription is compatible with MutableMapping
        :rtype: ~notificationhubs.models.RegistrationDescription
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create(
        self, body: Union[_models.RegistrationDescription, JSON, IO], **kwargs: Any
    ) -> _models.RegistrationDescription:
        """Create an Azure Notification Hubs registration description.

        :param body: The registration description. Is either a model type or a IO type. Required.
        :type body: ~notificationhubs.models.RegistrationDescription or JSON or IO
        :keyword content_type: The HTTP content-type. Default value is None.
        :paramtype content_type: str
        :return: RegistrationDescription. The RegistrationDescription is compatible with MutableMapping
        :rtype: ~notificationhubs.models.RegistrationDescription
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.RegistrationDescription]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=AzureJSONEncoder)

        request = build_registrations_create_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.RegistrationDescription, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @overload
    def create_or_update(
        self,
        registration_id: str,
        body: Union[_models.RegistrationDescription, JSON],
        *,
        content_type: str = "application/atom+xml;type=entry;charset=utf-8",
        e_tag: Optional[str] = None,
        **kwargs: Any
    ) -> _models.RegistrationDescription:
        """Create or update an Azure Notification Hubs registration description.

        :param registration_id: The registration ID. Required.
        :type registration_id: str
        :param body: The registration description. Required.
        :type body: ~notificationhubs.models.RegistrationDescription or JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/atom+xml;type=entry;charset=utf-8".
        :paramtype content_type: str
        :keyword e_tag: The If-Match HTTP header. Default value is None.
        :paramtype e_tag: str
        :return: RegistrationDescription. The RegistrationDescription is compatible with MutableMapping
        :rtype: ~notificationhubs.models.RegistrationDescription
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create_or_update(
        self,
        registration_id: str,
        body: IO,
        *,
        content_type: str = "application/atom+xml;type=entry;charset=utf-8",
        e_tag: Optional[str] = None,
        **kwargs: Any
    ) -> _models.RegistrationDescription:
        """Create or update an Azure Notification Hubs registration description.

        :param registration_id: The registration ID. Required.
        :type registration_id: str
        :param body: The registration description. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/atom+xml;type=entry;charset=utf-8".
        :paramtype content_type: str
        :keyword e_tag: The If-Match HTTP header. Default value is None.
        :paramtype e_tag: str
        :return: RegistrationDescription. The RegistrationDescription is compatible with MutableMapping
        :rtype: ~notificationhubs.models.RegistrationDescription
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create_or_update(
        self,
        registration_id: str,
        body: Union[_models.RegistrationDescription, JSON, IO],
        *,
        e_tag: Optional[str] = None,
        **kwargs: Any
    ) -> _models.RegistrationDescription:
        """Create or update an Azure Notification Hubs registration description.

        :param registration_id: The registration ID. Required.
        :type registration_id: str
        :param body: The registration description. Is either a model type or a IO type. Required.
        :type body: ~notificationhubs.models.RegistrationDescription or JSON or IO
        :keyword e_tag: The If-Match HTTP header. Default value is None.
        :paramtype e_tag: str
        :keyword content_type: The Content-Type HTTP header. Default value is None.
        :paramtype content_type: str
        :return: RegistrationDescription. The RegistrationDescription is compatible with MutableMapping
        :rtype: ~notificationhubs.models.RegistrationDescription
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.RegistrationDescription]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(body, (IO, bytes)):
            _content = body
        else:
            _content = json.dumps(body, cls=AzureJSONEncoder)

        request = build_registrations_create_or_update_request(
            registration_id=registration_id,
            e_tag=e_tag,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.RegistrationDescription, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def delete(  # pylint: disable=inconsistent-return-statements
        self, registration_id: str, *, e_tag: Optional[str] = None, **kwargs: Any
    ) -> None:
        """Delete an Azure Notification Hubs registration description.

        :param registration_id: The registration ID. Required.
        :type registration_id: str
        :keyword e_tag: The If-Match HTTP header. Default value is None.
        :paramtype e_tag: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_registrations_delete_request(
            registration_id=registration_id,
            e_tag=e_tag,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["tracking-id"] = self._deserialize("str", response.headers.get("tracking-id"))
        response_headers["x-ms-correlation-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-correlation-request-id")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)

    @distributed_trace
    def get(self, registration_id: str, **kwargs: Any) -> _models.RegistrationDescription:
        """Get an Azure Notification Hubs registration description.

        :param registration_id: The registration ID. Required.
        :type registration_id: str
        :return: RegistrationDescription. The RegistrationDescription is compatible with MutableMapping
        :rtype: ~notificationhubs.models.RegistrationDescription
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.RegistrationDescription]

        request = build_registrations_get_request(
            registration_id=registration_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.RegistrationDescription, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def list(
        self,
        *,
        top: Optional[str] = None,
        filter: Optional[str] = None,
        continuation_token_parameter: Optional[str] = None,
        **kwargs: Any
    ) -> List[_models.RegistrationDescription]:
        """List Azure Notification Hubs registration descriptions.

        :keyword top: The limit to the number of records to retrieve. Default value is None.
        :paramtype top: str
        :keyword filter: The filter query to find registrations. Default value is None.
        :paramtype filter: str
        :keyword continuation_token_parameter: The continuation token for more results. Default value
         is None.
        :paramtype continuation_token_parameter: str
        :return: list of RegistrationDescription
        :rtype: list[~notificationhubs.models.RegistrationDescription]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[_models.RegistrationDescription]]

        request = build_registrations_list_request(
            top=top,
            filter=filter,
            continuation_token_parameter=continuation_token_parameter,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["X-MS-ContinuationToken"] = self._deserialize(
            "str", response.headers.get("X-MS-ContinuationToken")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized


class ListRegistrationsByTagOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~notificationhubs.AzureNotificationHubsService`'s
        :attr:`list_registrations_by_tag` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list(
        self, tag: str, *, top: Optional[str] = None, continuation_token_parameter: Optional[str] = None, **kwargs: Any
    ) -> List[_models.RegistrationDescription]:
        """List all Azure Notification Hubs registrations description matching the given tag.

        :param tag: The tag name to search. Required.
        :type tag: str
        :keyword top: The limit to the number of records to retrieve. Default value is None.
        :paramtype top: str
        :keyword continuation_token_parameter: The continuation token for more results. Default value
         is None.
        :paramtype continuation_token_parameter: str
        :return: list of RegistrationDescription
        :rtype: list[~notificationhubs.models.RegistrationDescription]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[_models.RegistrationDescription]]

        request = build_list_registrations_by_tag_list_request(
            tag=tag,
            top=top,
            continuation_token_parameter=continuation_token_parameter,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["X-MS-ContinuationToken"] = self._deserialize(
            "str", response.headers.get("X-MS-ContinuationToken")
        )

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized


class NotificationsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~notificationhubs.AzureNotificationHubsService`'s
        :attr:`notifications` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def send_notification(
        self,
        notification: Union[_models.Notification, JSON],
        *,
        test: bool,
        platform: str,
        direct: Optional[bool] = None,
        device_handle: Optional[str] = None,
        tags: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.NotificationOutcome:
        """Send a notification using Azure Notification Hubs.

        :param notification: The notification to send. Required.
        :type notification: ~notificationhubs.models.Notification or JSON
        :keyword test: Enables test send for debug purposes. Required.
        :paramtype test: bool
        :keyword platform: The notification target platform. Required.
        :paramtype platform: str
        :keyword direct: Direct send operation. Default value is None.
        :paramtype direct: bool
        :keyword device_handle: The notification target device handle. Default value is None.
        :paramtype device_handle: str
        :keyword tags: The notification target tag expression. Default value is None.
        :paramtype tags: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: NotificationOutcome. The NotificationOutcome is compatible with MutableMapping
        :rtype: ~notificationhubs.models.NotificationOutcome
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def send_notification(
        self,
        notification: IO,
        *,
        test: bool,
        platform: str,
        direct: Optional[bool] = None,
        device_handle: Optional[str] = None,
        tags: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> _models.NotificationOutcome:
        """Send a notification using Azure Notification Hubs.

        :param notification: The notification to send. Required.
        :type notification: IO
        :keyword test: Enables test send for debug purposes. Required.
        :paramtype test: bool
        :keyword platform: The notification target platform. Required.
        :paramtype platform: str
        :keyword direct: Direct send operation. Default value is None.
        :paramtype direct: bool
        :keyword device_handle: The notification target device handle. Default value is None.
        :paramtype device_handle: str
        :keyword tags: The notification target tag expression. Default value is None.
        :paramtype tags: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: NotificationOutcome. The NotificationOutcome is compatible with MutableMapping
        :rtype: ~notificationhubs.models.NotificationOutcome
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def send_notification(
        self,
        notification: Union[_models.Notification, JSON, IO],
        *,
        test: bool,
        platform: str,
        direct: Optional[bool] = None,
        device_handle: Optional[str] = None,
        tags: Optional[str] = None,
        **kwargs: Any
    ) -> _models.NotificationOutcome:
        """Send a notification using Azure Notification Hubs.

        :param notification: The notification to send. Is either a model type or a IO type. Required.
        :type notification: ~notificationhubs.models.Notification or JSON or IO
        :keyword test: Enables test send for debug purposes. Required.
        :paramtype test: bool
        :keyword platform: The notification target platform. Required.
        :paramtype platform: str
        :keyword direct: Direct send operation. Default value is None.
        :paramtype direct: bool
        :keyword device_handle: The notification target device handle. Default value is None.
        :paramtype device_handle: str
        :keyword tags: The notification target tag expression. Default value is None.
        :paramtype tags: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: NotificationOutcome. The NotificationOutcome is compatible with MutableMapping
        :rtype: ~notificationhubs.models.NotificationOutcome
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.NotificationOutcome]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(notification, (IO, bytes)):
            _content = notification
        else:
            _content = json.dumps(notification, cls=AzureJSONEncoder)

        request = build_notifications_send_notification_request(
            test=test,
            platform=platform,
            direct=direct,
            device_handle=device_handle,
            tags=tags,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["location"] = self._deserialize("str", response.headers.get("location"))
        response_headers["tracking-id"] = self._deserialize("str", response.headers.get("tracking-id"))
        response_headers["x-ms-correlation-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-correlation-request-id")
        )

        deserialized = _deserialize(_models.NotificationOutcome, response.json())

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized


class ScheduledNotificationsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~notificationhubs.AzureNotificationHubsService`'s
        :attr:`scheduled_notifications` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def cancel_notification(  # pylint: disable=inconsistent-return-statements
        self, notification_id: str, **kwargs: Any
    ) -> None:
        """Cancel a scheduled notification.

        :param notification_id: The ID of the notification to cancel. Required.
        :type notification_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        request = build_scheduled_notifications_cancel_notification_request(
            notification_id=notification_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["tracking-id"] = self._deserialize("str", response.headers.get("tracking-id"))
        response_headers["x-ms-correlation-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-correlation-request-id")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)

    @overload
    def schedule_notification(  # pylint: disable=inconsistent-return-statements
        self,
        notification: Union[_models.Notification, JSON],
        *,
        schedule_time: str,
        platform: str,
        tags: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Schedule a notification.

        :param notification: The notification to schedule. Required.
        :type notification: ~notificationhubs.models.Notification or JSON
        :keyword schedule_time: The notification scheduled time. Required.
        :paramtype schedule_time: str
        :keyword platform: The notification target platform. Required.
        :paramtype platform: str
        :keyword tags: The notification target tag expression. Default value is None.
        :paramtype tags: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def schedule_notification(  # pylint: disable=inconsistent-return-statements
        self,
        notification: IO,
        *,
        schedule_time: str,
        platform: str,
        tags: Optional[str] = None,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> None:
        """Schedule a notification.

        :param notification: The notification to schedule. Required.
        :type notification: IO
        :keyword schedule_time: The notification scheduled time. Required.
        :paramtype schedule_time: str
        :keyword platform: The notification target platform. Required.
        :paramtype platform: str
        :keyword tags: The notification target tag expression. Default value is None.
        :paramtype tags: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def schedule_notification(  # pylint: disable=inconsistent-return-statements
        self,
        notification: Union[_models.Notification, JSON, IO],
        *,
        schedule_time: str,
        platform: str,
        tags: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """Schedule a notification.

        :param notification: The notification to schedule. Is either a model type or a IO type.
         Required.
        :type notification: ~notificationhubs.models.Notification or JSON or IO
        :keyword schedule_time: The notification scheduled time. Required.
        :paramtype schedule_time: str
        :keyword platform: The notification target platform. Required.
        :paramtype platform: str
        :keyword tags: The notification target tag expression. Default value is None.
        :paramtype tags: str
        :keyword content_type: Body parameter Content-Type. Known values are: application/json. Default
         value is None.
        :paramtype content_type: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[None]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(notification, (IO, bytes)):
            _content = notification
        else:
            _content = json.dumps(notification, cls=AzureJSONEncoder)

        request = build_scheduled_notifications_schedule_notification_request(
            schedule_time=schedule_time,
            platform=platform,
            tags=tags,
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["location"] = self._deserialize("str", response.headers.get("location"))
        response_headers["tracking-id"] = self._deserialize("str", response.headers.get("tracking-id"))
        response_headers["x-ms-correlation-request-id"] = self._deserialize(
            "str", response.headers.get("x-ms-correlation-request-id")
        )

        if cls:
            return cls(pipeline_response, None, response_headers)


class NotificationHubJobsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~notificationhubs.AzureNotificationHubsService`'s
        :attr:`notification_hub_jobs` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def create(
        self,
        notification_hub_job: Union[_models.NotificationHubJob, JSON],
        *,
        content_type: str = "application/atom+xml;type=entry;charset=utf-8",
        **kwargs: Any
    ) -> _models.NotificationHubJob:
        """Create an import/export Azure Notification Hubs job.

        :param notification_hub_job: The Azure Notification Hub import/export job to create. Required.
        :type notification_hub_job: ~notificationhubs.models.NotificationHubJob or JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/atom+xml;type=entry;charset=utf-8".
        :paramtype content_type: str
        :return: NotificationHubJob. The NotificationHubJob is compatible with MutableMapping
        :rtype: ~notificationhubs.models.NotificationHubJob
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @overload
    def create(
        self,
        notification_hub_job: IO,
        *,
        content_type: str = "application/atom+xml;type=entry;charset=utf-8",
        **kwargs: Any
    ) -> _models.NotificationHubJob:
        """Create an import/export Azure Notification Hubs job.

        :param notification_hub_job: The Azure Notification Hub import/export job to create. Required.
        :type notification_hub_job: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/atom+xml;type=entry;charset=utf-8".
        :paramtype content_type: str
        :return: NotificationHubJob. The NotificationHubJob is compatible with MutableMapping
        :rtype: ~notificationhubs.models.NotificationHubJob
        :raises ~azure.core.exceptions.HttpResponseError:
        """

    @distributed_trace
    def create(
        self, notification_hub_job: Union[_models.NotificationHubJob, JSON, IO], **kwargs: Any
    ) -> _models.NotificationHubJob:
        """Create an import/export Azure Notification Hubs job.

        :param notification_hub_job: The Azure Notification Hub import/export job to create. Is either
         a model type or a IO type. Required.
        :type notification_hub_job: ~notificationhubs.models.NotificationHubJob or JSON or IO
        :keyword content_type: The HTTP Content-Type header. Default value is None.
        :paramtype content_type: str
        :return: NotificationHubJob. The NotificationHubJob is compatible with MutableMapping
        :rtype: ~notificationhubs.models.NotificationHubJob
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type = kwargs.pop("content_type", _headers.pop("Content-Type", None))  # type: Optional[str]
        cls = kwargs.pop("cls", None)  # type: ClsType[_models.NotificationHubJob]

        content_type = content_type or "application/json"
        _content = None
        if isinstance(notification_hub_job, (IO, bytes)):
            _content = notification_hub_job
        else:
            _content = json.dumps(notification_hub_job, cls=AzureJSONEncoder)

        request = build_notification_hub_jobs_create_request(
            content_type=content_type,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.NotificationHubJob, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def get(self, job_id: str, **kwargs: Any) -> _models.NotificationHubJob:
        """Get an import/export Azure Notification Hubs job.

        :param job_id: The job ID. Required.
        :type job_id: str
        :return: NotificationHubJob. The NotificationHubJob is compatible with MutableMapping
        :rtype: ~notificationhubs.models.NotificationHubJob
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[_models.NotificationHubJob]

        request = build_notification_hub_jobs_get_request(
            job_id=job_id,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = _deserialize(_models.NotificationHubJob, response.json())

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    @distributed_trace
    def list(self, **kwargs: Any) -> List[_models.NotificationHubJob]:
        """List all import/export Azure Notification Hubs jobs.

        :return: list of NotificationHubJob
        :rtype: list[~notificationhubs.models.NotificationHubJob]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls = kwargs.pop("cls", None)  # type: ClsType[List[_models.NotificationHubJob]]

        request = build_notification_hub_jobs_list_request(
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "namespaceName": self._serialize.url("self._config.namespace_name", self._config.namespace_name, "str"),
            "hubName": self._serialize.url("self._config.hub_name", self._config.hub_name, "str"),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)  # type: ignore

        pipeline_response = self._client._pipeline.run(  # type: ignore # pylint: disable=protected-access
            request, stream=False, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
