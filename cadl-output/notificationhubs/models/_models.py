# coding=utf-8
# pylint: disable=too-many-lines
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) Python Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
import sys
from typing import Any, Dict, List, Mapping, Optional, TYPE_CHECKING, Union, overload

from .. import _model_base
from .._model_base import rest_discriminator, rest_field

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from .. import models as _models
if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object


class Notification(_model_base.Model):
    """Represents an Azure Notification Hubs notification.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AdmNotification, AppleNotification, BaiduNotification, BrowserNotification,
    FirebaseLegacyNotification, WindowsNotification

    All required parameters must be populated in order to send to Azure.

    :ivar body: The notification body. Required.
    :vartype body: str
    :ivar headers: The HTTP headers for the notification.
    :vartype headers: dict[str, str]
    :ivar platform: Required. Default value is "wns".
    :vartype platform: str
    """

    __mapping__ = {}
    body: str = rest_field()
    """The notification body. Required. """
    headers: Optional[Dict[str, str]] = rest_field()
    """The HTTP headers for the notification. """
    platform: str = rest_discriminator()
    """Required. Default value is \"wns\"."""

    @overload
    def __init__(
        self,
        *,
        body: str,
        headers: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class AdmNotification(Notification, discriminator="adm"):
    """Represents an ADM based Azure Notification Hubs notification.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar body: The notification body. Required.
    :vartype body: str
    :ivar headers: The HTTP headers for the notification.
    :vartype headers: dict[str, str]
    :ivar content_type: The notification content type. Required. Default value is
     "application/json;charset=utf-8".
    :vartype content_type: str
    :ivar platform: The notification platform type. Required. Default value is "adm".
    :vartype platform: str
    """

    content_type: str = rest_field(name="contentType")
    """The notification content type. Required. Default value is \"application/json;charset=utf-8\"."""

    @overload
    def __init__(
        self,
        *,
        body: str,
        headers: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "adm"  # type: str


class RegistrationDescription(_model_base.Model):
    """Represents an Azure Notification Hubs registration description.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    AdmRegistrationDescription, AdmTemplateRegistrationDescription, AppleRegistrationDescription,
    AppleTemplateRegistrationDescription, BaiduRegistrationDescription,
    BaiduTemplateRegistrationDescription, BrowserRegistrationDescription,
    BrowserTemplateRegistrationDescription, GcmRegistrationDescription,
    GcmTemplateRegistrationDescription, MpnsRegistrationDescription,
    MpnsTemplateRegistrationDescription, WindowsRegistrationDescription,
    WindowsTemplateRegistrationDescription

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar platform: Required. Default value is "windowsTemplate".
    :vartype platform: str
    """

    __mapping__ = {}
    registration_id: Optional[str] = rest_field(name="registrationId")
    """The registration ID. """
    tags: Optional[str] = rest_field()
    """The registration tags comma separated list. """
    etag: Optional[str] = rest_field()
    """The registration etag. """
    push_variables: Optional[Dict[str, str]] = rest_field(name="pushVariables")
    """The registration push variables property bag. """
    expiration_time: Optional[datetime.date] = rest_field(name="expirationTime")
    """The registration expiration time. """
    platform: str = rest_discriminator()
    """Required. Default value is \"windowsTemplate\"."""

    @overload
    def __init__(
        self,
        *,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class AdmRegistrationDescription(RegistrationDescription, discriminator="adm"):
    """Represents an ADM based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar adm_registration_id: The ADM registration ID. Required.
    :vartype adm_registration_id: str
    :ivar platform: The platform of registration description. Required. Default value is "adm".
    :vartype platform: str
    """

    adm_registration_id: str = rest_field(name="admRegistrationId")
    """The ADM registration ID. Required. """

    @overload
    def __init__(
        self,
        *,
        adm_registration_id: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "adm"  # type: str


class AdmTemplateRegistrationDescription(RegistrationDescription, discriminator="admTemplate"):
    """Represents an ADM template based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar adm_registration_id: The ADM registration ID. Required.
    :vartype adm_registration_id: str
    :ivar body_template: The registration body template. Required.
    :vartype body_template: str
    :ivar template_name: The registration template name.
    :vartype template_name: str
    :ivar platform: The platform of registration description. Required. Default value is
     "admTemplate".
    :vartype platform: str
    """

    adm_registration_id: str = rest_field(name="admRegistrationId")
    """The ADM registration ID. Required. """
    body_template: str = rest_field(name="bodyTemplate")
    """The registration body template. Required. """
    template_name: Optional[str] = rest_field(name="templateName")
    """The registration template name. """

    @overload
    def __init__(
        self,
        *,
        adm_registration_id: str,
        body_template: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
        template_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "admTemplate"  # type: str


class AppleNotification(Notification, discriminator="apple"):
    """Represents an Apple based Azure Notification Hubs notification.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar body: The notification body. Required.
    :vartype body: str
    :ivar headers: The HTTP headers for the notification.
    :vartype headers: dict[str, str]
    :ivar content_type: The notification content type. Required. Default value is
     "application/json;charset=utf-8".
    :vartype content_type: str
    :ivar platform: The notification platform type. Required. Default value is "apple".
    :vartype platform: str
    """

    content_type: str = rest_field(name="contentType")
    """The notification content type. Required. Default value is \"application/json;charset=utf-8\"."""

    @overload
    def __init__(
        self,
        *,
        body: str,
        headers: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "apple"  # type: str


class AppleRegistrationDescription(RegistrationDescription, discriminator="apple"):
    """Represents an Apple based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar device_token: The APNs device token. Required.
    :vartype device_token: str
    :ivar platform: The platform of registration description. Required. Default value is "apple".
    :vartype platform: str
    """

    device_token: str = rest_field(name="deviceToken")
    """The APNs device token. Required. """

    @overload
    def __init__(
        self,
        *,
        device_token: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "apple"  # type: str


class AppleTemplateRegistrationDescription(
    RegistrationDescription, discriminator="appleTemplate"
):  # pylint: disable=too-many-instance-attributes
    """Represents an Apple template based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar device_token: The APNs device token. Required.
    :vartype device_token: str
    :ivar body_template: The registration body template. Required.
    :vartype body_template: str
    :ivar template_name: The registration template name.
    :vartype template_name: str
    :ivar apns_headers: The APNs headers for the template.
    :vartype apns_headers: dict[str, str]
    :ivar priority: The APNs priority for any message.
    :vartype priority: int
    :ivar platform: The platform of registration description. Required. Default value is
     "appleTemplate".
    :vartype platform: str
    """

    device_token: str = rest_field(name="deviceToken")
    """The APNs device token. Required. """
    body_template: str = rest_field(name="bodyTemplate")
    """The registration body template. Required. """
    template_name: Optional[str] = rest_field(name="templateName")
    """The registration template name. """
    apns_headers: Optional[Dict[str, str]] = rest_field(name="apnsHeaders")
    """The APNs headers for the template. """
    priority: Optional[int] = rest_field()
    """The APNs priority for any message. """

    @overload
    def __init__(
        self,
        *,
        device_token: str,
        body_template: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
        template_name: Optional[str] = None,
        apns_headers: Optional[Dict[str, str]] = None,
        priority: Optional[int] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "appleTemplate"  # type: str


class BaiduNotification(Notification, discriminator="baidu"):
    """Represents a Baidu based Azure Notification Hubs notification.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar body: The notification body. Required.
    :vartype body: str
    :ivar headers: The HTTP headers for the notification.
    :vartype headers: dict[str, str]
    :ivar content_type: The notification content type. Required. Default value is
     "application/json;charset=utf-8".
    :vartype content_type: str
    :ivar platform: The notification platform type. Required. Default value is "baidu".
    :vartype platform: str
    """

    content_type: str = rest_field(name="contentType")
    """The notification content type. Required. Default value is \"application/json;charset=utf-8\"."""

    @overload
    def __init__(
        self,
        *,
        body: str,
        headers: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "baidu"  # type: str


class BaiduRegistrationDescription(RegistrationDescription, discriminator="baidu"):
    """Represents a Baidu based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar baidu_channel_id: The Baidu channel ID. Required.
    :vartype baidu_channel_id: str
    :ivar baidu_user_id: The baidu user ID. Required.
    :vartype baidu_user_id: str
    :ivar platform: The platform of registration description. Required. Default value is "baidu".
    :vartype platform: str
    """

    baidu_channel_id: str = rest_field(name="baiduChannelId")
    """The Baidu channel ID. Required. """
    baidu_user_id: str = rest_field(name="baiduUserId")
    """The baidu user ID. Required. """

    @overload
    def __init__(
        self,
        *,
        baidu_channel_id: str,
        baidu_user_id: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "baidu"  # type: str


class BaiduTemplateRegistrationDescription(RegistrationDescription, discriminator="baiduTemplate"):
    """Represents a Baidu template based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar baidu_channel_id: The Baidu channel ID. Required.
    :vartype baidu_channel_id: str
    :ivar baidu_user_id: The baidu user ID. Required.
    :vartype baidu_user_id: str
    :ivar body_template: The registration body template. Required.
    :vartype body_template: str
    :ivar template_name: The registration template name.
    :vartype template_name: str
    :ivar platform: The platform of registration description. Required. Default value is
     "baiduTemplate".
    :vartype platform: str
    """

    baidu_channel_id: str = rest_field(name="baiduChannelId")
    """The Baidu channel ID. Required. """
    baidu_user_id: str = rest_field(name="baiduUserId")
    """The baidu user ID. Required. """
    body_template: str = rest_field(name="bodyTemplate")
    """The registration body template. Required. """
    template_name: Optional[str] = rest_field(name="templateName")
    """The registration template name. """

    @overload
    def __init__(
        self,
        *,
        baidu_channel_id: str,
        baidu_user_id: str,
        body_template: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
        template_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "baiduTemplate"  # type: str


class Installation(_model_base.Model):
    """Represents an Azure Notification Hubs Installation.

    You probably want to use the sub-classes and not this class directly. Known sub-classes are:
    BrowserInstallation, FcmLegacyInstallation

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar installation_id: The installation ID. Required.
    :vartype installation_id: str
    :ivar user_id: The user ID.
    :vartype user_id: str
    :ivar expiration_time: The installation expiration time.
    :vartype expiration_time: str
    :ivar last_update: The last updated date.
    :vartype last_update: str
    :ivar tags: The itags for the installation. Required.
    :vartype tags: list[str]
    :ivar templates: The templates for the installation. Required.
    :vartype templates: dict[str, str]
    :ivar platform: Required. Default value is "gcm".
    :vartype platform: str
    """

    __mapping__ = {}
    installation_id: str = rest_field(name="installationId")
    """The installation ID. Required. """
    user_id: Optional[str] = rest_field(name="userId")
    """The user ID. """
    expiration_time: Optional[str] = rest_field(name="expirationTime", readonly=True)
    """The installation expiration time. """
    last_update: Optional[str] = rest_field(name="lastUpdate", readonly=True)
    """The last updated date. """
    tags: List[str] = rest_field()
    """The itags for the installation. Required. """
    templates: Dict[str, str] = rest_field()
    """The templates for the installation. Required. """
    platform: str = rest_discriminator()
    """Required. Default value is \"gcm\"."""

    @overload
    def __init__(
        self,
        *,
        installation_id: str,
        tags: List[str],
        templates: Dict[str, str],
        user_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class BrowserInstallation(Installation, discriminator="browser"):
    """Represents an Web Push based Azure Notification Hubs Installation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar installation_id: The installation ID. Required.
    :vartype installation_id: str
    :ivar user_id: The user ID.
    :vartype user_id: str
    :ivar expiration_time: The installation expiration time.
    :vartype expiration_time: str
    :ivar last_update: The last updated date.
    :vartype last_update: str
    :ivar tags: The itags for the installation. Required.
    :vartype tags: list[str]
    :ivar templates: The templates for the installation. Required.
    :vartype templates: dict[str, str]
    :ivar platform: The platform for the installation. Required. Default value is "browser".
    :vartype platform: str
    :ivar push_handle: The Web API push handle for the installation. Required.
    :vartype push_handle: ~notificationhubs.models.BrowserPushHandle
    """

    push_handle: "_models.BrowserPushHandle" = rest_field(name="pushHandle")
    """The Web API push handle for the installation. Required. """

    @overload
    def __init__(
        self,
        *,
        installation_id: str,
        tags: List[str],
        templates: Dict[str, str],
        push_handle: "_models.BrowserPushHandle",
        user_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "browser"  # type: str


class BrowserNotification(Notification, discriminator="browser"):
    """Represents a Web Push based Azure Notification Hubs notification.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar body: The notification body. Required.
    :vartype body: str
    :ivar headers: The HTTP headers for the notification.
    :vartype headers: dict[str, str]
    :ivar content_type: The notification content type. Required. Default value is
     "application/json;charset=utf-8".
    :vartype content_type: str
    :ivar platform: The notification platform type. Required. Default value is "browser".
    :vartype platform: str
    """

    content_type: str = rest_field(name="contentType")
    """The notification content type. Required. Default value is \"application/json;charset=utf-8\"."""

    @overload
    def __init__(
        self,
        *,
        body: str,
        headers: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "browser"  # type: str


class BrowserPushHandle(_model_base.Model):
    """Represents a Web Push push handle.

    All required parameters must be populated in order to send to Azure.

    :ivar endpoint: The Web Push API endpoint. Required.
    :vartype endpoint: str
    :ivar p256dh: The Web Push API P256DH key. Required.
    :vartype p256dh: str
    :ivar auth: The Web Push API auth secret. Required.
    :vartype auth: str
    """

    endpoint: str = rest_field()
    """The Web Push API endpoint. Required. """
    p256dh: str = rest_field()
    """The Web Push API P256DH key. Required. """
    auth: str = rest_field()
    """The Web Push API auth secret. Required. """

    @overload
    def __init__(
        self,
        *,
        endpoint: str,
        p256dh: str,
        auth: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class BrowserRegistrationDescription(RegistrationDescription, discriminator="browser"):
    """Represents a Web Push based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar endpoint: The Web Push endpoint URL. Required.
    :vartype endpoint: str
    :ivar auth: The Web Push auth secret. Required.
    :vartype auth: str
    :ivar p256dh: The Web Push P256DH. Required.
    :vartype p256dh: str
    :ivar platform: The platform of registration description. Required. Default value is "browser".
    :vartype platform: str
    """

    endpoint: str = rest_field()
    """The Web Push endpoint URL. Required. """
    auth: str = rest_field()
    """The Web Push auth secret. Required. """
    p256dh: str = rest_field()
    """The Web Push P256DH. Required. """

    @overload
    def __init__(
        self,
        *,
        endpoint: str,
        auth: str,
        p256dh: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "browser"  # type: str


class BrowserTemplateRegistrationDescription(
    RegistrationDescription, discriminator="browserTemplate"
):  # pylint: disable=too-many-instance-attributes
    """Represents a Web Push template based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar endpoint: The Web Push endpoint URL. Required.
    :vartype endpoint: str
    :ivar auth: The Web Push auth secret. Required.
    :vartype auth: str
    :ivar p256dh: The Web Push P256DH. Required.
    :vartype p256dh: str
    :ivar body_template: The registration body template. Required.
    :vartype body_template: str
    :ivar template_name: The registration template name.
    :vartype template_name: str
    :ivar platform: The platform of registration description. Required. Default value is
     "browserTemplate".
    :vartype platform: str
    """

    endpoint: str = rest_field()
    """The Web Push endpoint URL. Required. """
    auth: str = rest_field()
    """The Web Push auth secret. Required. """
    p256dh: str = rest_field()
    """The Web Push P256DH. Required. """
    body_template: str = rest_field(name="bodyTemplate")
    """The registration body template. Required. """
    template_name: Optional[str] = rest_field(name="templateName")
    """The registration template name. """

    @overload
    def __init__(
        self,
        *,
        endpoint: str,
        auth: str,
        p256dh: str,
        body_template: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
        template_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "browserTemplate"  # type: str


class FcmLegacyInstallation(Installation, discriminator="gcm"):
    """Represents an FCM Legacy based Azure Notification Hubs Installation.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar installation_id: The installation ID. Required.
    :vartype installation_id: str
    :ivar user_id: The user ID.
    :vartype user_id: str
    :ivar expiration_time: The installation expiration time.
    :vartype expiration_time: str
    :ivar last_update: The last updated date.
    :vartype last_update: str
    :ivar tags: The itags for the installation. Required.
    :vartype tags: list[str]
    :ivar templates: The templates for the installation. Required.
    :vartype templates: dict[str, str]
    :ivar platform: The platform for the installation. Required. Default value is "gcm".
    :vartype platform: str
    """

    @overload
    def __init__(
        self,
        *,
        installation_id: str,
        tags: List[str],
        templates: Dict[str, str],
        user_id: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "gcm"  # type: str


class FirebaseLegacyNotification(Notification, discriminator="gcm"):
    """Represents an Firebase Legacy based Azure Notification Hubs notification.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar body: The notification body. Required.
    :vartype body: str
    :ivar headers: The HTTP headers for the notification.
    :vartype headers: dict[str, str]
    :ivar content_type: The notification content type. Required. Default value is
     "application/json;charset=utf-8".
    :vartype content_type: str
    :ivar platform: The notification platform type. Required. Default value is "gcm".
    :vartype platform: str
    """

    content_type: str = rest_field(name="contentType")
    """The notification content type. Required. Default value is \"application/json;charset=utf-8\"."""

    @overload
    def __init__(
        self,
        *,
        body: str,
        headers: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "gcm"  # type: str


class GcmRegistrationDescription(RegistrationDescription, discriminator="gcm"):
    """Represents a Firebase Legacy based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar gcm_registration_id: The Firebase Legacy registration ID. Required.
    :vartype gcm_registration_id: str
    :ivar platform: The platform of registration description. Required. Default value is "gcm".
    :vartype platform: str
    """

    gcm_registration_id: str = rest_field(name="gcmRegistrationId")
    """The Firebase Legacy registration ID. Required. """

    @overload
    def __init__(
        self,
        *,
        gcm_registration_id: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "gcm"  # type: str


class GcmTemplateRegistrationDescription(RegistrationDescription, discriminator="gcmTemplate"):
    """Represents a Firebase Legacy template based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar gcm_registration_id: The Firebase Legacy registration ID. Required.
    :vartype gcm_registration_id: str
    :ivar body_template: The registration body template. Required.
    :vartype body_template: str
    :ivar template_name: The registration template name.
    :vartype template_name: str
    :ivar platform: The platform of registration description. Required. Default value is
     "gcmTemplate".
    :vartype platform: str
    """

    gcm_registration_id: str = rest_field(name="gcmRegistrationId")
    """The Firebase Legacy registration ID. Required. """
    body_template: str = rest_field(name="bodyTemplate")
    """The registration body template. Required. """
    template_name: Optional[str] = rest_field(name="templateName")
    """The registration template name. """

    @overload
    def __init__(
        self,
        *,
        gcm_registration_id: str,
        body_template: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
        template_name: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "gcmTemplate"  # type: str


class JsonPatch(_model_base.Model):
    """Represents a JSON Patch operation.

    All required parameters must be populated in order to send to Azure.

    :ivar op: The JSON patch operation type. Required. Known values are: "add", "remove", and
     "replace".
    :vartype op: str or ~notificationhubs.models.JsonPatchOperation
    :ivar path: The JSON patch path. Required.
    :vartype path: str
    :ivar value: The JSON patch value.
    :vartype value: str
    """

    op: Union[str, "_models.JsonPatchOperation"] = rest_field()
    """The JSON patch operation type. Required. Known values are: \"add\", \"remove\", and \"replace\"."""
    path: str = rest_field()
    """The JSON patch path. Required. """
    value: Optional[str] = rest_field()
    """The JSON patch value. """

    @overload
    def __init__(
        self,
        *,
        op: Union[str, "_models.JsonPatchOperation"],
        path: str,
        value: Optional[str] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class MpnsRegistrationDescription(RegistrationDescription, discriminator="mpns"):
    """Represents a Windows Phone based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar channel_uri: The Windows Phone channel URL. Required.
    :vartype channel_uri: str
    :ivar platform: The platform of registration description. Required. Default value is "mpns".
    :vartype platform: str
    """

    channel_uri: str = rest_field(name="channelUri")
    """The Windows Phone channel URL. Required. """

    @overload
    def __init__(
        self,
        *,
        channel_uri: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "mpns"  # type: str


class MpnsTemplateRegistrationDescription(RegistrationDescription, discriminator="mpnsTemplate"):
    """Represents a Windows Phone template based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar channel_uri: The Windows Phone channel URL. Required.
    :vartype channel_uri: str
    :ivar body_template: The registration body template. Required.
    :vartype body_template: str
    :ivar template_name: The registration template name.
    :vartype template_name: str
    :ivar mpns_headers: The Windows Phone template headers.
    :vartype mpns_headers: dict[str, str]
    :ivar platform: The platform of registration description. Required. Default value is
     "mpnsTemplate".
    :vartype platform: str
    """

    channel_uri: str = rest_field(name="channelUri")
    """The Windows Phone channel URL. Required. """
    body_template: str = rest_field(name="bodyTemplate")
    """The registration body template. Required. """
    template_name: Optional[str] = rest_field(name="templateName")
    """The registration template name. """
    mpns_headers: Optional[Dict[str, str]] = rest_field(name="mpnsHeaders")
    """The Windows Phone template headers. """

    @overload
    def __init__(
        self,
        *,
        channel_uri: str,
        body_template: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
        template_name: Optional[str] = None,
        mpns_headers: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "mpnsTemplate"  # type: str


class NotificationHubJob(_model_base.Model):  # pylint: disable=too-many-instance-attributes
    """Represents the Azure Notification Hubs job.

    All required parameters must be populated in order to send to Azure.

    :ivar job_id: Job ID.
    :vartype job_id: str
    :ivar output_file_name: Job output file name.
    :vartype output_file_name: str
    :ivar failures_file_name: Job failures file name.
    :vartype failures_file_name: str
    :ivar progress: Job progress percentage.
    :vartype progress: float
    :ivar type: Job type. Required. Known values are: "ExportRegistrations",
     "ImportCreateRegistrations", "ImportUpdateRegistrations", "ImportDeleteRegistrations", and
     "ImportUpsertRegistrations".
    :vartype type: str or ~notificationhubs.models.NotificationHubJobType
    :ivar status: Job status. Known values are: "Started", "Running", "Completed", and "Failed".
    :vartype status: str or ~notificationhubs.models.NotificationHubJobStatus
    :ivar output_container_url: Job output container URL. Required.
    :vartype output_container_url: str
    :ivar import_file_url: Job import file URL.
    :vartype import_file_url: str
    :ivar input_properties: Job input property bag.
    :vartype input_properties: dict[str, str]
    :ivar failure: Job failure reason.
    :vartype failure: str
    :ivar output_properties: Job output property bag.
    :vartype output_properties: dict[str, str]
    :ivar created_at: Job created time.
    :vartype created_at: ~datetime.date
    :ivar updated_at: Job updated time.
    :vartype updated_at: ~datetime.date
    """

    job_id: Optional[str] = rest_field(name="jobId")
    """Job ID. """
    output_file_name: Optional[str] = rest_field(name="outputFileName")
    """Job output file name. """
    failures_file_name: Optional[str] = rest_field(name="failuresFileName")
    """Job failures file name. """
    progress: Optional[float] = rest_field()
    """Job progress percentage. """
    type: Union[str, "_models.NotificationHubJobType"] = rest_field()
    """Job type. Required. Known values are: \"ExportRegistrations\", \"ImportCreateRegistrations\", \"ImportUpdateRegistrations\", \"ImportDeleteRegistrations\", and \"ImportUpsertRegistrations\"."""
    status: Optional[Union[str, "_models.NotificationHubJobStatus"]] = rest_field()
    """Job status. Known values are: \"Started\", \"Running\", \"Completed\", and \"Failed\"."""
    output_container_url: str = rest_field(name="outputContainerUrl")
    """Job output container URL. Required. """
    import_file_url: Optional[str] = rest_field(name="importFileUrl")
    """Job import file URL. """
    input_properties: Optional[Dict[str, str]] = rest_field(name="inputProperties")
    """Job input property bag. """
    failure: Optional[str] = rest_field()
    """Job failure reason. """
    output_properties: Optional[Dict[str, str]] = rest_field(name="outputProperties")
    """Job output property bag. """
    created_at: Optional[datetime.date] = rest_field(name="createdAt")
    """Job created time. """
    updated_at: Optional[datetime.date] = rest_field(name="updatedAt")
    """Job updated time. """

    @overload
    def __init__(
        self,
        *,
        type: Union[str, "_models.NotificationHubJobType"],
        output_container_url: str,
        job_id: Optional[str] = None,
        output_file_name: Optional[str] = None,
        failures_file_name: Optional[str] = None,
        progress: Optional[float] = None,
        status: Optional[Union[str, "_models.NotificationHubJobStatus"]] = None,
        import_file_url: Optional[str] = None,
        input_properties: Optional[Dict[str, str]] = None,
        failure: Optional[str] = None,
        output_properties: Optional[Dict[str, str]] = None,
        created_at: Optional[datetime.date] = None,
        updated_at: Optional[datetime.date] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class NotificationOutcome(_model_base.Model):
    """Represents the notification outcome.

    All required parameters must be populated in order to send to Azure.

    :ivar success: Successfully delivered notifications outcome count. Required.
    :vartype success: int
    :ivar failure: Failed delivery notifications outcome count. Required.
    :vartype failure: int
    :ivar results: The notification outcome results per device. Required.
    :vartype results: list[~notificationhubs.models.RegistrationResult]
    """

    success: int = rest_field()
    """Successfully delivered notifications outcome count. Required. """
    failure: int = rest_field()
    """Failed delivery notifications outcome count. Required. """
    results: List["_models.RegistrationResult"] = rest_field()
    """The notification outcome results per device. Required. """

    @overload
    def __init__(
        self,
        *,
        success: int,
        failure: int,
        results: List["_models.RegistrationResult"],
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class RegistrationResult(_model_base.Model):
    """Represents the registration results for the notification outcome.

    All required parameters must be populated in order to send to Azure.

    :ivar application_platform: The application platform. Required.
    :vartype application_platform: str
    :ivar pns_handle: The registration push handle. Required.
    :vartype pns_handle: str
    :ivar registration_id: The registration ID. Required.
    :vartype registration_id: str
    :ivar outcome: The outcome result message. Required.
    :vartype outcome: str
    """

    application_platform: str = rest_field(name="applicationPlatform")
    """The application platform. Required. """
    pns_handle: str = rest_field(name="pnsHandle")
    """The registration push handle. Required. """
    registration_id: str = rest_field(name="registrationId")
    """The registration ID. Required. """
    outcome: str = rest_field()
    """The outcome result message. Required. """

    @overload
    def __init__(
        self,
        *,
        application_platform: str,
        pns_handle: str,
        registration_id: str,
        outcome: str,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class WindowsNotification(Notification, discriminator="wns"):
    """Represents a Windows based Azure Notification Hubs notification.

    All required parameters must be populated in order to send to Azure.

    :ivar body: The notification body. Required.
    :vartype body: str
    :ivar headers: The HTTP headers for the notification.
    :vartype headers: dict[str, str]
    :ivar platform: The notification content type. Required. Default value is "wns".
    :vartype platform: str
    """

    @overload
    def __init__(
        self,
        *,
        body: str,
        headers: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "wns"  # type: str


class WindowsRegistrationDescription(RegistrationDescription, discriminator="windows"):
    """Represents a Windows based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar channel_uri: The Windows channel URL. Required.
    :vartype channel_uri: str
    :ivar platform: The platform of registration description. Required. Default value is "windows".
    :vartype platform: str
    """

    channel_uri: str = rest_field(name="channelUri")
    """The Windows channel URL. Required. """

    @overload
    def __init__(
        self,
        *,
        channel_uri: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "windows"  # type: str


class WindowsTemplateRegistrationDescription(RegistrationDescription, discriminator="windowsTemplate"):
    """Represents a Windows template based Azure Notification Hubs registration description.

    All required parameters must be populated in order to send to Azure.

    :ivar registration_id: The registration ID.
    :vartype registration_id: str
    :ivar tags: The registration tags comma separated list.
    :vartype tags: str
    :ivar etag: The registration etag.
    :vartype etag: str
    :ivar push_variables: The registration push variables property bag.
    :vartype push_variables: dict[str, str]
    :ivar expiration_time: The registration expiration time.
    :vartype expiration_time: ~datetime.date
    :ivar channel_uri: The Windows channel URL. Required.
    :vartype channel_uri: str
    :ivar body_template: The registration body template. Required.
    :vartype body_template: str
    :ivar template_name: The registration template name.
    :vartype template_name: str
    :ivar wns_headers: The Windows template headers.
    :vartype wns_headers: dict[str, str]
    :ivar platform: The platform of registration description. Required. Default value is
     "windowsTemplate".
    :vartype platform: str
    """

    channel_uri: str = rest_field(name="channelUri")
    """The Windows channel URL. Required. """
    body_template: str = rest_field(name="bodyTemplate")
    """The registration body template. Required. """
    template_name: Optional[str] = rest_field(name="templateName")
    """The registration template name. """
    wns_headers: Optional[Dict[str, str]] = rest_field(name="wnsHeaders")
    """The Windows template headers. """

    @overload
    def __init__(
        self,
        *,
        channel_uri: str,
        body_template: str,
        registration_id: Optional[str] = None,
        tags: Optional[str] = None,
        etag: Optional[str] = None,
        push_variables: Optional[Dict[str, str]] = None,
        expiration_time: Optional[datetime.date] = None,
        template_name: Optional[str] = None,
        wns_headers: Optional[Dict[str, str]] = None,
    ):
        ...

    @overload
    def __init__(self, mapping: Mapping[str, Any]):
        """
        :param mapping: raw JSON to initialize the model.
        :type mapping: Mapping[str, Any]
        """
        ...

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.platform = "windowsTemplate"  # type: str
