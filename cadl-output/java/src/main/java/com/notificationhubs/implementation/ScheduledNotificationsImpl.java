// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.notificationhubs.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ScheduledNotifications. */
public final class ScheduledNotificationsImpl {
    /** The proxy service used to perform REST calls. */
    private final ScheduledNotificationsService service;

    /** The service client containing this operation class. */
    private final AzureNotificationHubsServiceClientImpl client;

    /**
     * Initializes an instance of ScheduledNotificationsImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ScheduledNotificationsImpl(AzureNotificationHubsServiceClientImpl client) {
        this.service =
                RestProxy.create(
                        ScheduledNotificationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AzureNotificationHubsServiceScheduledNotifications to be used by the
     * proxy service to perform REST calls.
     */
    @Host("https://{namespaceName}.servicebus.windows.net/{hubName}")
    @ServiceInterface(name = "AzureNotificationHub")
    private interface ScheduledNotificationsService {
        @Delete("/schedulednotifications/{notificationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> cancelNotification(
                @HostParam("namespaceName") String namespaceName,
                @HostParam("hubName") String hubName,
                @PathParam("notificationId") String notificationId,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/schedulednotifications")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> scheduleNotification(
                @HostParam("namespaceName") String namespaceName,
                @HostParam("hubName") String hubName,
                @HeaderParam("ServiceBusNotification-ScheduleTime") String serviceBusNotificationScheduleTime,
                @HeaderParam("ServiceBusNotification-Format") String serviceBusNotificationFormat,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData notification,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Cancel a scheduled notification.
     *
     * @param notificationId The ID of the notification to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> cancelNotificationWithResponseAsync(
            String notificationId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.cancelNotification(
                                this.client.getNamespaceName(),
                                this.client.getHubName(),
                                notificationId,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Cancel a scheduled notification.
     *
     * @param notificationId The ID of the notification to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelNotificationWithResponse(String notificationId, RequestOptions requestOptions) {
        return cancelNotificationWithResponseAsync(notificationId, requestOptions).block();
    }

    /**
     * Schedule a notification.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ServiceBusNotification-Tags</td><td>String</td><td>No</td><td>The notification target tag expression</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param serviceBusNotificationScheduleTime The notification scheduled time.
     * @param serviceBusNotificationFormat The notification target platform.
     * @param notification The notification to schedule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> scheduleNotificationWithResponseAsync(
            String serviceBusNotificationScheduleTime,
            String serviceBusNotificationFormat,
            BinaryData notification,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.scheduleNotification(
                                this.client.getNamespaceName(),
                                this.client.getHubName(),
                                serviceBusNotificationScheduleTime,
                                serviceBusNotificationFormat,
                                accept,
                                notification,
                                requestOptions,
                                context));
    }

    /**
     * Schedule a notification.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ServiceBusNotification-Tags</td><td>String</td><td>No</td><td>The notification target tag expression</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param serviceBusNotificationScheduleTime The notification scheduled time.
     * @param serviceBusNotificationFormat The notification target platform.
     * @param notification The notification to schedule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> scheduleNotificationWithResponse(
            String serviceBusNotificationScheduleTime,
            String serviceBusNotificationFormat,
            BinaryData notification,
            RequestOptions requestOptions) {
        return scheduleNotificationWithResponseAsync(
                        serviceBusNotificationScheduleTime, serviceBusNotificationFormat, notification, requestOptions)
                .block();
    }
}
