// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.notificationhubs;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous AzureNotificationHubsServiceClient type. */
@ServiceClient(builder = ScheduledNotificationsClientBuilder.class)
public final class ScheduledNotificationsClient {
    @Generated private final ScheduledNotificationsAsyncClient client;

    /**
     * Initializes an instance of ScheduledNotificationsClient class.
     *
     * @param client the async client.
     */
    @Generated
    ScheduledNotificationsClient(ScheduledNotificationsAsyncClient client) {
        this.client = client;
    }

    /**
     * Cancel a scheduled notification.
     *
     * @param notificationId The ID of the notification to cancel.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> cancelNotificationWithResponse(String notificationId, RequestOptions requestOptions) {
        return this.client.cancelNotificationWithResponse(notificationId, requestOptions).block();
    }

    /**
     * Schedule a notification.
     *
     * <p><strong>Header Parameters</strong>
     *
     * <table border="1">
     *     <caption>Header Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>ServiceBusNotification-Tags</td><td>String</td><td>No</td><td>The notification target tag expression</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addHeader}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * String
     * }</pre>
     *
     * @param serviceBusNotificationScheduleTime The notification scheduled time.
     * @param serviceBusNotificationFormat The notification target platform.
     * @param notification The notification to schedule.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> scheduleNotificationWithResponse(
            String serviceBusNotificationScheduleTime,
            String serviceBusNotificationFormat,
            BinaryData notification,
            RequestOptions requestOptions) {
        return this.client
                .scheduleNotificationWithResponse(
                        serviceBusNotificationScheduleTime, serviceBusNotificationFormat, notification, requestOptions)
                .block();
    }
}
